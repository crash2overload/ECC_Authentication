
#include "../include/field.h"
#include "../include/curves.h"
#include "../include/cryptocore_util.h"
#include "../include/arithmetic_core.h"
#include <stdio.h>
#include <string.h>

#define prec 192

int main(void){
	int dd = -1;
	if ((dd = open_physical (dd)) == -1)
      return (-1);
    
    EFp P, Q, res;
    EFp_init(&P);
    EFp_init(&Q);
    EFp_init(&res);
    EFp_get_random(&P);
    EFp_get_random(&Q);
   
    EFp_add(&res, &P, &Q);
    
    EFp_print(&res);
    EFp_print(&P);
    EFp_print(&Q);
    
    EFp_clear(&P);
    EFp_clear(&Q);  
    close_physical (dd); 
    return 0;
}

/***************** Funktions in Fp **********************/
/*
void Fp_init(Fp *A){
	A->x0 = malloc(prec/8);
}
void Fp_clear(Fp *A){
	free(A->x0);
}

void Fp_print(Fp *A){
	int i;
	for(i = 0; i < prec/32; i++)
		printf("%08x ", A->x0[i]);
	printf("\n");
}

void Fp_inv(Fp *A){
	Fp_inv_core(A->x0);
}

void Fp_copy(Fp *dest, Fp *src){
	memcpy(dest->x0, src->x0, prec/8);
}

void Fp_mul(Fp *res, Fp *A, Fp *B){
	Fp_mult_core(res->x0, A->x0, B->x0);
}

void Fp_add(Fp *res, Fp *A, Fp *B){
	Fp_add_core(res->x0, A->x0, B->x0);
}

void Fp_sub(Fp *res, Fp *A, Fp *B){
	Fp_sub_core(res->x0, A->x0, B->x0);
}

void Fp_exp(Fp *res, Fp *A, Fp *sk){
	Fp_exp_core(res->x0, A->x0, sk->x0);
}

*/

/***************** Funktions in Fp2 **********************/
/*
void Fp2_init(Fp2 *A){
	Fp_init(&A->x0);
	Fp_init(&A->x1);
}
void Fp2_clear(Fp2 *A){
	Fp_clear(&A->x0);
	Fp_clear(&A->x1);
}

void Fp2_print(Fp2 *A){
	Fp_print(&A->x0);
	Fp_print(&A->x1);
}

void Fp2_copy(Fp2 *dest, Fp2 *src){
	Fp_copy(&dest->x0, &src->x0);
	Fp_copy(&dest->x1, &src->x1);
}

void Fp2_inv(Fp2 *A){
	
}

void Fp2_mul(Fp2 *res, Fp2 *A, Fp2 *B){
    Fp temp1, temp2, temp3, temp4;
    Fp_init(&temp1);
    Fp_init(&temp2);
    Fp_init(&temp3);
    Fp_init(&temp4);
    Fp_mul(&temp1, &A->x0, &B->x0);//a*c
    Fp_mul(&temp2, &A->x1, &B->x1);//b*d
    Fp_add(&temp3, &A->x0, &A->x1);//a+b
    Fp_add(&temp4, &B->x0, &B->x1);//c+d
    //x0
    Fp_sub(&res->x0 ,&temp1, &temp2);//a*c-b*d*v
    //x1
    Fp_mul(&res->x1, &temp3, &temp4);//(a+b)(c+d)
    Fp_sub(&res->x1, &res->x1, &temp1);
    Fp_sub(&res->x1, &res->x1, &temp2);
    
    Fp_clear(&temp1);
    Fp_clear(&temp2);
    Fp_clear(&temp3);
    Fp_clear(&temp4);
}

void Fp2_mul_basis(Fp2 *res, Fp2 *A){
	Fp temp1;
	Fp_init(&temp1);
	
	Fp_copy(&temp1, &A->x0);
    
    Fp_sub(&res->x0, &temp1, &A->x1);
    Fp_add(&res->x1, &temp1, &A->x1);
    
    Fp_clear(&temp1);
}

void Fp2_add(Fp2 *res, Fp2 *A, Fp2 *B){
	Fp_add(&res->x0, &A->x0, &B->x0);
	Fp_add(&res->x1, &A->x1, &B->x1);
}

void Fp2_sub(Fp2 *res, Fp2 *A, Fp2 *B){
	Fp_sub(&res->x0, &A->x0, &B->x0);
	Fp_sub(&res->x1, &A->x1, &B->x1);
}

void Fp2_exp(Fp2 *res, Fp2 *A, Fp2 *sk){
	
}
*/

/***************** Funktions in Fp6 **********************/

//void Fp6_init(Fp6 *A){
	//Fp2_init(&A->x0);
	//Fp2_init(&A->x1);
	//Fp2_init(&A->x2);
//}
//void Fp6_clear(Fp6 *A){
	//Fp2_clear(&A->x0);
	//Fp2_clear(&A->x1);
	//Fp2_clear(&A->x2);
//}

//void Fp6_print(Fp6 *A){
	//Fp2_print(&A->x0);
	//Fp2_print(&A->x1);
	//Fp2_print(&A->x2);
//}


//void Fp6_inv(Fp6 *A){
	
//}

//void Fp6_copy(Fp6 *dest, Fp6 *src){
	//Fp2_copy(&dest->x0, &src->x0);
	//Fp2_copy(&dest->x1, &src->x1);
	//Fp2_copy(&dest->x2, &src->x2);
//}

//void Fp6_mul(Fp6 *res, Fp6 *A, Fp6 *B){
	//Fp2 temp1, temp2, temp3, temp4, temp5, temp6, temp7;
    //Fp2_init(&temp1);
    //Fp2_init(&temp2);
    //Fp2_init(&temp3);
    //Fp2_init(&temp4);
    //Fp2_init(&temp5);
    //Fp2_init(&temp6);
    //Fp2_init(&temp7);
	
	//Fp2_mul(&temp1, &A->x0, &B->x0);//x0*y0
    //Fp2_mul(&temp2, &A->x1, &B->x1);//x1*y1
    //Fp2_mul(&temp3, &A->x2, &B->x2);//x2*y2
    
    //Fp2_add(&temp5, &A->x0, &A->x1);//x0+x1
    //Fp2_add(&temp4, &B->x0, &B->x1);//y0+y1
    //Fp2_mul(&temp5, &temp5, &temp4);//(x0+x1)(y0+y1)
    
    //Fp2_add(&temp6, &A->x1, &A->x2);//x1+x2
    //Fp2_add(&temp4, &B->x1, &B->x2);//y1+y2
    //Fp2_mul(&temp6, &temp6, &temp4);//(x1+x2)(y1+y2)
    
    //Fp2_add(&temp7, &B->x0, &B->x2);//y2+y0
    //Fp2_add(&temp4, &A->x0, &A->x2);//x2+x0
    //Fp2_mul(&temp7, &temp7, &temp4);//(x2+x0)(y2+y0)
    ////x0
    //Fp2_sub(&temp6, &temp6, &temp2);
    //Fp2_sub(&temp6, &temp6, &temp3);//(x1+x2)(y1+y2)-x1y1-x2y2
    //Fp2_mul_basis(&temp4, &temp6);
    //Fp2_add(&res->x0, &temp1, &temp4);
    ////x1
    //Fp2_sub(&temp5, &temp5, &temp1);
    //Fp2_sub(&temp5, &temp5, &temp2);
    //Fp2_mul_basis(&temp4, &temp3);
    //Fp2_add(&res->x1, &temp4, &temp5);
    ////x2
    //Fp2_sub(&temp7, &temp7, &temp1);
    //Fp2_sub(&temp7, &temp7, &temp3);
    //Fp2_add(&res->x2, &temp2, &temp7);
    
    //Fp2_clear(&temp1);
    //Fp2_clear(&temp2);
    //Fp2_clear(&temp3);
    //Fp2_clear(&temp4);
    //Fp2_clear(&temp5);
    //Fp2_clear(&temp6);
    //Fp2_clear(&temp7);
//}

//void Fp6_mul_basis(Fp6 *res, Fp6 *A){
    //Fp2 temp1, temp2, temp3;
    //Fp2_init(&temp1);
    //Fp2_init(&temp2);
    //Fp2_init(&temp3);
    
    //Fp2_copy(&temp1, &A->x0);
    //Fp2_copy(&temp2, &A->x1);
    //Fp2_copy(&temp3, &A->x2);
    
    //Fp_sub(&res->x0.x0, &temp3.x0, &temp3.x1);
    //Fp_add(&res->x0.x1, &temp3.x0, &temp3.x1);
    //Fp_copy(&res->x1.x0, &temp1.x0);
    //Fp_copy(&res->x1.x1, &temp1.x1);
    //Fp_copy(&res->x2.x0, &temp2.x0);
    //Fp_copy(&res->x2.x1, &temp2.x1);
    
    //Fp2_clear(&temp1);
    //Fp2_clear(&temp2);
    //Fp2_clear(&temp3);
//}

//void Fp6_add(Fp6 *res, Fp6 *A, Fp6 *B){
	//Fp2_add(&res->x0, &A->x0, &B->x0);
	//Fp2_add(&res->x1, &A->x1, &B->x1);
	//Fp2_add(&res->x2, &A->x2, &B->x2);
//}

//void Fp6_sub(Fp6 *res, Fp6 *A, Fp6 *B){
	//Fp2_sub(&res->x0, &A->x0, &B->x0);
	//Fp2_sub(&res->x1, &A->x1, &B->x1);
	//Fp2_sub(&res->x2, &A->x2, &B->x2);
//}

//void Fp6_exp(Fp6 *res, Fp6 *A, Fp6 *sk){
	
//}


/***************** Funktions in Fp12 **********************/

//void Fp12_init(Fp12 *A){
	//Fp6_init(&A->x0);
	//Fp6_init(&A->x1);
//}
//void Fp12_clear(Fp12 *A){
	//Fp6_clear(&A->x0);
	//Fp6_clear(&A->x1);
//}

//void Fp12_print(Fp12 *A){
	//Fp6_print(&A->x0);
	//Fp6_print(&A->x1);
//}

//void Fp12_inv(Fp12 *A){
	
//}

//void Fp12_copy(Fp12 *dest, Fp12 *src){
	//Fp6_copy(&dest->x0, &src->x1);
	//Fp6_copy(&dest->x0, &src->x1);
//}

//void Fp12_mul(Fp12 *res, Fp12 *A, Fp12 *B){
	//Fp6 temp1, temp2;
	//Fp6_init(&temp1);
	//Fp6_init(&temp2);
	
	//Fp6_mul(&temp2, &A->x1, &B->x1);//b*d
    //Fp6_add(&temp1, &A->x0, &A->x1);//a+b
    //Fp6_add(&res->x1, &B->x0, &B->x1);//c+d
    //Fp6_mul(&res->x1, &temp1, &res->x1);//(a+b)(c+d)
    //Fp6_mul(&temp1, &A->x0, &B->x0);//a*c
    ////x0
    //Fp6_mul_basis(&res->x0, &temp2);//b*d*v
    //Fp6_add(&res->x0, &res->x0, &temp1);//a*c+b*d*v
    ////x1
    //Fp6_sub(&res->x1, &res->x1, &temp1);
    //Fp6_sub(&res->x1, &res->x1, &temp2);
    
    //Fp6_clear(&temp1);
    //Fp6_clear(&temp2);
//}

//void Fp12_add(Fp12 *res, Fp12 *A, Fp12 *B){
	//Fp6_add(&res->x0, &A->x0, &B->x0);
	//Fp6_add(&res->x1, &A->x1, &B->x1);
//}

//void Fp12_sub(Fp12 *res, Fp12 *A, Fp12 *B){
	//Fp6_sub(&res->x0, &A->x0, &B->x0);
	//Fp6_sub(&res->x1, &A->x1, &B->x1);
//}

//void Fp12_exp(Fp12 *res, Fp12 *A, Fp12 *sk){
	
//}



/**********************************************************/
/*				Funktions on Curve						  */
/**********************************************************/

//void EFp_init(EFp *P){
	//Fp_init(&P->x);
	//Fp_init(&P->y);
	//Fp_init(&P->z);	
//}

//void EFp_clear(EFp *P){
	//Fp_clear(&P->x);
	//Fp_clear(&P->y);
	//Fp_clear(&P->z);	
//}

//void EFp_print(EFp *P){
	//int i;
	
	//printf("X: ");
	//for(i = 0; i < prec/32; i++)
		//printf("%08x ", P->x.x0[i]);
	//printf("\n");
	//printf("Y: ");
	//for(i = 0; i < prec/32; i++)
		//printf("%08x ", P->y.x0[i]);
	//printf("\n");
	//printf("Z: ");
	//for(i = 0; i < prec/32; i++)
		//printf("%08x ", P->z.x0[i]);
	//printf("\n");
//}

//void EFp_get_random(EFp *P){
	//Fp elem;
	//Fp_init(&elem);
	//make_random_Element(elem.x0, prec);
	//memcpy(P->x.x0, &bn192.G_x[0], prec/8);
	//memcpy(P->y.x0, &bn192.G_y[0], prec/8);
	//EFp_to_proj(P);
	//EFp_mul_core(elem.x0, P);
	//EFp_to_affine(P);
	//Fp_clear(&elem);
//}

//void EFp_add(EFp *res, EFp *P, EFp *Q){
	//EFp_to_proj(P);
	//EFp_to_proj(Q);
	//EFp_add_core(res, P, Q);
	//EFp_to_affine(res);
	//EFp_to_affine(P);
	//EFp_to_affine(Q);
//}

//void EFp_mul(Fp *sk, EFp *P){
	//EFp_to_proj(P);
	//EFp_mul_core(sk->x0, P);
	//EFp_to_affine(P);
//}
